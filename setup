#!/bin/sh

repo=`git rev-parse --show-toplevel`
if [ $? -ne 0 ]
then
   echo "setup must be in repo"
   exit 1
fi

#
# add find-hook that 
#
for hook in \
    applypatch-msg commit-msg fsmonitor-watchman \
		   post-update pre-applypatch pre-commit \
		   pre-merge-commit pre-push pre-rebase \
		   pre-receive prepare-commit-msg \
		   push-to-checkout update
do
cat >"$repo/.git/hooks/$hook" <<END
#!/bin/sh -f

#
#  Look through repo for directory-local $hook hooks in folders that
#  have files that are tracked by git.
#
#  For example, if you want to add a $hook pre-check /android folder,
#  that is run on the main branch, then create an executable script
#  as the /repo/android/.$hook-main file or
#  in the /repo/android/.$hook-main directory
#  
#

# directory of git repo
export repo=\`git rev-parse --show-toplevel\`

# current branch
export branch=\`git rev-parse --abbrev-ref HEAD\`

# which hook
export hook=$hook

# look at all directories with tracked files
git ls-tree --full-tree --name-only -r HEAD | xargs dirname | sort | uniq | while read -r dir
do
  script="\$repo/\$dir/.${hook}-\$branch"
  if [ -f "\$script" -a -x "\$script" ]
  then
    if ! ( cd "\$repo/\$dir" && exec "\$script" )
    then
      echo "\$repo/\$dir/.${hook}-\$branch" failed.
      exit 1
    fi
  fi
  if [ -d "\$script" ]
  then
    for subscript in "\$script"/[a-zA-Z]*[a-zA-Z0-9]
    do
      if [ -x "\$subscript" ]
      then
        if ! ( cd "\$repo/\$dir" && exec "\$subscript" )
        then
          echo "\$subscript failed."
          exit 1
        fi
      fi
    done
  fi
done
END
chmod +x "$repo/.git/hooks/$hook"
done
